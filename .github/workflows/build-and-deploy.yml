name: Build and Deploy

on:
    [push, pull_request]

env:
  REGISTRY: ghcr.io
  SERVER_IMAGE: ghcr.io/${{ github.repository }}/server
  WEB_IMAGE: ghcr.io/${{ github.repository }}/front
  VERSION: v2.0.4

jobs:
  # Code quality check - runs on all branches
  ruff-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync
        working-directory: ./server

      - name: Run ruff check
        run: uv run ruff check
        working-directory: ./server

      - name: Run ruff format check
        run: uv run ruff format --check
        working-directory: ./server

  # Test builds for non-main branches (PRs)
  test-server-x64:
    if: github.ref != 'refs/heads/main'
    needs: [ruff-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push server test image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.SERVER_IMAGE }}:${{ env.VERSION }}-nightly

  test-web-x64:
    if: github.ref != 'refs/heads/main'
    needs: [ruff-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push web test image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.WEB_IMAGE }}:${{ env.VERSION }}-nightly

  # Production builds for main branch
  server-x64:
    if: github.ref == 'refs/heads/main'
    needs: [ruff-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push server x64 image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:${{ env.VERSION }}
            ${{ env.SERVER_IMAGE }}:latest

  web-x64:
    if: github.ref == 'refs/heads/main'
    needs: [ruff-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push web x64 image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:${{ env.VERSION }}
            ${{ env.WEB_IMAGE }}:latest
